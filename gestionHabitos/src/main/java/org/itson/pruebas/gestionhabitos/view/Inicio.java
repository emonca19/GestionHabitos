package org.itson.pruebas.gestionhabitos.view;

import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.FontFormatException;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.format.TextStyle;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.ScrollPaneConstants;
import javax.swing.SwingConstants;
import org.itson.pruebas.gestionhabitos.controller.ControllerException;
import org.itson.pruebas.gestionhabitos.controller.GestionarHabitosNegocio;
import org.itson.pruebas.gestionhabitos.controller.HabitoDTO;
import org.itson.pruebas.gestionhabitos.controller.HistorialHabitosDTO;
import org.itson.pruebas.gestionhabitos.controller.IGestionarHabitosNegocio;
import org.itson.pruebas.gestionhabitos.controller.Sesion;

/**
 *
 * @author Eliana Monge
 * @author Cristina Castro
 * @author Eduardo Talavera
 * @author Roberto Garc√≠a
 */
public class Inicio extends javax.swing.JPanel {

    private final FrameContenedor frame;
    private JPanel pnlHabitosPendientes;
    private JPanel pnlHabitosRealizados;
    private IGestionarHabitosNegocio gestionar;
    private LocalDate fechaActual;
    private Date[] lista;

    /**
     * Creates new form Inicio
     *
     * @param frame
     */
    public Inicio(FrameContenedor frame) {
        initComponents();
        lista = new Date[7];
        gestionar = new GestionarHabitosNegocio();
        fechaActual = LocalDate.now();
        cargarDias(Date.from(fechaActual.atStartOfDay(ZoneId.systemDefault()).toInstant()));
        this.frame = frame;
        try {
            setFonts();
            mostrarHabitos();
        } catch (FontFormatException | IOException e) {
            frame.mostrarAviso(e.getMessage(), "Aviso");
        }
        setearDatos();
    }

    public final void setearDatos() {
        lblNombreUsuario.setText(Sesion.getCuenta().getNombre());
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblMes = new javax.swing.JLabel();
        btnIzquierda = new javax.swing.JButton();
        btnDerecha = new javax.swing.JButton();
        btnDia1 = new javax.swing.JButton();
        btnDia2 = new javax.swing.JButton();
        btnDia3 = new javax.swing.JButton();
        btnDia4 = new javax.swing.JButton();
        btnDia5 = new javax.swing.JButton();
        btnDia6 = new javax.swing.JButton();
        btnDia7 = new javax.swing.JButton();
        btnPerfil = new javax.swing.JButton();
        btnAgregar = new javax.swing.JButton();
        pnlContenedorHabitosPendientes = new javax.swing.JPanel();
        pnlContenedorHabitosRealizados = new javax.swing.JPanel();
        lblHabitosPendientes = new javax.swing.JLabel();
        lblHabitosRealizados = new javax.swing.JLabel();
        lblFecha = new javax.swing.JLabel();
        lblDivision = new javax.swing.JLabel();
        btnHoy = new javax.swing.JButton();
        btnHabitos = new javax.swing.JButton();
        btnProgreso = new javax.swing.JButton();
        lblNombreUsuario = new javax.swing.JLabel();
        lblLunes = new javax.swing.JLabel();
        lblLunes1 = new javax.swing.JLabel();
        lblMartes = new javax.swing.JLabel();
        lblMartes1 = new javax.swing.JLabel();
        lblMiercoles = new javax.swing.JLabel();
        lblMiercoles1 = new javax.swing.JLabel();
        lblJueves = new javax.swing.JLabel();
        lblJueves1 = new javax.swing.JLabel();
        lblViernes = new javax.swing.JLabel();
        lblViernes1 = new javax.swing.JLabel();
        lblSabado = new javax.swing.JLabel();
        lblSabado1 = new javax.swing.JLabel();
        lblDomingo = new javax.swing.JLabel();
        lblDomingo1 = new javax.swing.JLabel();
        fondo = new javax.swing.JLabel();

        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMaximumSize(new java.awt.Dimension(750, 750));
        setMinimumSize(new java.awt.Dimension(750, 750));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblMes.setForeground(new java.awt.Color(255, 255, 255));
        lblMes.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMes.setText("mes");
        add(lblMes, new org.netbeans.lib.awtextra.AbsoluteConstraints(201, 69, 350, 30));

        btnIzquierda.setForeground(new java.awt.Color(245, 245, 245));
        btnIzquierda.setBorderPainted(false);
        btnIzquierda.setContentAreaFilled(false);
        btnIzquierda.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnIzquierda.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnIzquierda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzquierdaActionPerformed(evt);
            }
        });
        add(btnIzquierda, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 105, 16, 27));

        btnDerecha.setForeground(new java.awt.Color(245, 245, 245));
        btnDerecha.setBorderPainted(false);
        btnDerecha.setContentAreaFilled(false);
        btnDerecha.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDerecha.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnDerecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDerechaActionPerformed(evt);
            }
        });
        add(btnDerecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(713, 105, 16, 27));

        btnDia1.setForeground(new java.awt.Color(245, 245, 245));
        btnDia1.setBorderPainted(false);
        btnDia1.setContentAreaFilled(false);
        btnDia1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDia1.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnDia1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDia1ActionPerformed(evt);
            }
        });
        add(btnDia1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 110, 50, 50));

        btnDia2.setForeground(new java.awt.Color(245, 245, 245));
        btnDia2.setBorderPainted(false);
        btnDia2.setContentAreaFilled(false);
        btnDia2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDia2.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnDia2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDia2ActionPerformed(evt);
            }
        });
        add(btnDia2, new org.netbeans.lib.awtextra.AbsoluteConstraints(165, 106, 60, 60));

        btnDia3.setForeground(new java.awt.Color(245, 245, 245));
        btnDia3.setBorderPainted(false);
        btnDia3.setContentAreaFilled(false);
        btnDia3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDia3.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnDia3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDia3ActionPerformed(evt);
            }
        });
        add(btnDia3, new org.netbeans.lib.awtextra.AbsoluteConstraints(255, 106, 60, 60));

        btnDia4.setForeground(new java.awt.Color(245, 245, 245));
        btnDia4.setBorderPainted(false);
        btnDia4.setContentAreaFilled(false);
        btnDia4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDia4.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnDia4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDia4ActionPerformed(evt);
            }
        });
        add(btnDia4, new org.netbeans.lib.awtextra.AbsoluteConstraints(345, 106, 60, 60));

        btnDia5.setForeground(new java.awt.Color(245, 245, 245));
        btnDia5.setBorderPainted(false);
        btnDia5.setContentAreaFilled(false);
        btnDia5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDia5.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnDia5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDia5ActionPerformed(evt);
            }
        });
        add(btnDia5, new org.netbeans.lib.awtextra.AbsoluteConstraints(435, 106, 60, 60));

        btnDia6.setForeground(new java.awt.Color(245, 245, 245));
        btnDia6.setBorderPainted(false);
        btnDia6.setContentAreaFilled(false);
        btnDia6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDia6.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnDia6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDia6ActionPerformed(evt);
            }
        });
        add(btnDia6, new org.netbeans.lib.awtextra.AbsoluteConstraints(525, 106, 60, 60));

        btnDia7.setForeground(new java.awt.Color(245, 245, 245));
        btnDia7.setBorderPainted(false);
        btnDia7.setContentAreaFilled(false);
        btnDia7.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDia7.setMargin(new java.awt.Insets(0, 0, 0, 0));
        btnDia7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDia7ActionPerformed(evt);
            }
        });
        add(btnDia7, new org.netbeans.lib.awtextra.AbsoluteConstraints(615, 106, 60, 60));

        btnPerfil.setBorderPainted(false);
        btnPerfil.setContentAreaFilled(false);
        btnPerfil.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnPerfil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPerfilActionPerformed(evt);
            }
        });
        add(btnPerfil, new org.netbeans.lib.awtextra.AbsoluteConstraints(696, 9, 46, 46));

        btnAgregar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/agregarHabitos.png"))); // NOI18N
        btnAgregar.setBorderPainted(false);
        btnAgregar.setContentAreaFilled(false);
        btnAgregar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });
        add(btnAgregar, new org.netbeans.lib.awtextra.AbsoluteConstraints(675, 579, 50, 50));

        pnlContenedorHabitosPendientes.setOpaque(false);
        add(pnlContenedorHabitosPendientes, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 233, 700, 170));

        pnlContenedorHabitosRealizados.setOpaque(false);
        add(pnlContenedorHabitosRealizados, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 460, 700, 170));

        lblHabitosPendientes.setText("H√ÅBITOS PENDIENTES");
        add(lblHabitosPendientes, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 198, -1, -1));

        lblHabitosRealizados.setText("H√ÅBITOS REALIZADOS");
        add(lblHabitosRealizados, new org.netbeans.lib.awtextra.AbsoluteConstraints(25, 425, -1, -1));

        lblFecha.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblFecha.setText("fecha");
        add(lblFecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 193, 410, 25));

        lblDivision.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/division.png"))); // NOI18N
        add(lblDivision, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 415, -1, -1));

        btnHoy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/hoy.png"))); // NOI18N
        btnHoy.setBorderPainted(false);
        btnHoy.setContentAreaFilled(false);
        btnHoy.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnHoy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHoyActionPerformed(evt);
            }
        });
        add(btnHoy, new org.netbeans.lib.awtextra.AbsoluteConstraints(208, 654, 80, 81));

        btnHabitos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/habitos.png"))); // NOI18N
        btnHabitos.setBorderPainted(false);
        btnHabitos.setContentAreaFilled(false);
        btnHabitos.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnHabitos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHabitosActionPerformed(evt);
            }
        });
        add(btnHabitos, new org.netbeans.lib.awtextra.AbsoluteConstraints(335, 654, 80, 81));

        btnProgreso.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/progreso.png"))); // NOI18N
        btnProgreso.setBorderPainted(false);
        btnProgreso.setContentAreaFilled(false);
        btnProgreso.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnProgreso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProgresoActionPerformed(evt);
            }
        });
        add(btnProgreso, new org.netbeans.lib.awtextra.AbsoluteConstraints(462, 654, 80, 81));

        lblNombreUsuario.setForeground(new java.awt.Color(37, 52, 18));
        lblNombreUsuario.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        add(lblNombreUsuario, new org.netbeans.lib.awtextra.AbsoluteConstraints(387, 18, 300, 27));

        lblLunes.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblLunes.setForeground(new java.awt.Color(255, 255, 255));
        lblLunes.setText("L");
        add(lblLunes, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 110, 10, 20));

        lblLunes1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lblLunes1.setForeground(new java.awt.Color(255, 255, 255));
        lblLunes1.setText("21");
        add(lblLunes1, new org.netbeans.lib.awtextra.AbsoluteConstraints(92, 130, 30, 20));

        lblMartes.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblMartes.setForeground(new java.awt.Color(255, 255, 255));
        lblMartes.setText("M");
        add(lblMartes, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 110, 30, 20));

        lblMartes1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lblMartes1.setForeground(new java.awt.Color(255, 255, 255));
        lblMartes1.setText("22");
        add(lblMartes1, new org.netbeans.lib.awtextra.AbsoluteConstraints(183, 130, 60, 20));

        lblMiercoles.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblMiercoles.setForeground(new java.awt.Color(255, 255, 255));
        lblMiercoles.setText("X");
        add(lblMiercoles, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 110, 10, 20));

        lblMiercoles1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lblMiercoles1.setForeground(new java.awt.Color(255, 255, 255));
        lblMiercoles1.setText("23");
        add(lblMiercoles1, new org.netbeans.lib.awtextra.AbsoluteConstraints(273, 130, 60, 20));

        lblJueves.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblJueves.setForeground(new java.awt.Color(255, 255, 255));
        lblJueves.setText("J");
        add(lblJueves, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 110, 10, 20));

        lblJueves1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lblJueves1.setForeground(new java.awt.Color(255, 255, 255));
        lblJueves1.setText("24");
        add(lblJueves1, new org.netbeans.lib.awtextra.AbsoluteConstraints(362, 130, 60, 20));

        lblViernes.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblViernes.setForeground(new java.awt.Color(255, 255, 255));
        lblViernes.setText("V");
        add(lblViernes, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 110, 10, 20));

        lblViernes1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lblViernes1.setForeground(new java.awt.Color(255, 255, 255));
        lblViernes1.setText("25");
        add(lblViernes1, new org.netbeans.lib.awtextra.AbsoluteConstraints(453, 130, 50, 20));

        lblSabado.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblSabado.setForeground(new java.awt.Color(255, 255, 255));
        lblSabado.setText("S");
        add(lblSabado, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 110, 10, 20));

        lblSabado1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lblSabado1.setForeground(new java.awt.Color(255, 255, 255));
        lblSabado1.setText("26");
        add(lblSabado1, new org.netbeans.lib.awtextra.AbsoluteConstraints(543, 130, 60, 20));

        lblDomingo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblDomingo.setForeground(new java.awt.Color(255, 255, 255));
        lblDomingo.setText("D");
        add(lblDomingo, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 110, 10, 20));

        lblDomingo1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lblDomingo1.setForeground(new java.awt.Color(255, 255, 255));
        lblDomingo1.setText("27");
        add(lblDomingo1, new org.netbeans.lib.awtextra.AbsoluteConstraints(633, 130, 60, 20));

        fondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/fondo.png"))); // NOI18N
        add(fondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        getAccessibleContext().setAccessibleName("");
    }// </editor-fold>//GEN-END:initComponents

    private void btnHoyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHoyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnHoyActionPerformed

    private void btnProgresoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProgresoActionPerformed
        frame.mostrarProgresoSemanal();
    }//GEN-LAST:event_btnProgresoActionPerformed

    private void btnHabitosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHabitosActionPerformed
        frame.mostrarListaHabitos();
    }//GEN-LAST:event_btnHabitosActionPerformed

    private void btnDia1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDia1ActionPerformed
        // TODO add your handling code here:

        fechaActual = lista[0].toInstant()
                .atZone(ZoneId.systemDefault())
                .toLocalDate();
        String nombreDia = fechaActual.getDayOfWeek().getDisplayName(TextStyle.FULL, Locale.forLanguageTag("es"));
        String mes = fechaActual.getMonth().getDisplayName(TextStyle.FULL, new Locale("es", "ES")).toLowerCase();

        lblFecha.setText(nombreDia + " " + fechaActual.getDayOfMonth() + " de " + mes + " de " + fechaActual.getYear());
    }//GEN-LAST:event_btnDia1ActionPerformed

    private void btnDia2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDia2ActionPerformed
        // TODO add your handling code here:
        fechaActual = lista[1].toInstant()
                .atZone(ZoneId.systemDefault())
                .toLocalDate();
        String nombreDia = fechaActual.getDayOfWeek().getDisplayName(TextStyle.FULL, Locale.forLanguageTag("es"));
        String mes = fechaActual.getMonth().getDisplayName(TextStyle.FULL, new Locale("es", "ES")).toLowerCase();

        lblFecha.setText(nombreDia + " " + fechaActual.getDayOfMonth() + " de " + mes + " de " + fechaActual.getYear());
    }//GEN-LAST:event_btnDia2ActionPerformed

    private void btnDia3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDia3ActionPerformed
        // TODO add your handling code here:
        fechaActual = lista[2].toInstant()
                .atZone(ZoneId.systemDefault())
                .toLocalDate();
        String nombreDia = fechaActual.getDayOfWeek().getDisplayName(TextStyle.FULL, Locale.forLanguageTag("es"));
        String mes = fechaActual.getMonth().getDisplayName(TextStyle.FULL, new Locale("es", "ES")).toLowerCase();

        lblFecha.setText(nombreDia + " " + fechaActual.getDayOfMonth() + " de " + mes + " de " + fechaActual.getYear());
    }//GEN-LAST:event_btnDia3ActionPerformed

    private void btnDia4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDia4ActionPerformed
        // TODO add your handling code here:
        fechaActual = lista[3].toInstant()
                .atZone(ZoneId.systemDefault())
                .toLocalDate();
        String nombreDia = fechaActual.getDayOfWeek().getDisplayName(TextStyle.FULL, Locale.forLanguageTag("es"));
        String mes = fechaActual.getMonth().getDisplayName(TextStyle.FULL, new Locale("es", "ES")).toLowerCase();

        lblFecha.setText(nombreDia + " " + fechaActual.getDayOfMonth() + " de " + mes + " de " + fechaActual.getYear());
    }//GEN-LAST:event_btnDia4ActionPerformed

    private void btnDia5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDia5ActionPerformed
        // TODO add your handling code here:
        fechaActual = lista[4].toInstant()
                .atZone(ZoneId.systemDefault())
                .toLocalDate();
        String nombreDia = fechaActual.getDayOfWeek().getDisplayName(TextStyle.FULL, Locale.forLanguageTag("es"));
        String mes = fechaActual.getMonth().getDisplayName(TextStyle.FULL, new Locale("es", "ES")).toLowerCase();

        lblFecha.setText(nombreDia + " " + fechaActual.getDayOfMonth() + " de " + mes + " de " + fechaActual.getYear());
    }//GEN-LAST:event_btnDia5ActionPerformed

    private void btnDia6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDia6ActionPerformed
        // TODO add your handling code here:
        fechaActual = lista[5].toInstant()
                .atZone(ZoneId.systemDefault())
                .toLocalDate();
        String nombreDia = fechaActual.getDayOfWeek().getDisplayName(TextStyle.FULL, Locale.forLanguageTag("es"));
        String mes = fechaActual.getMonth().getDisplayName(TextStyle.FULL, new Locale("es", "ES")).toLowerCase();

        lblFecha.setText(nombreDia + " " + fechaActual.getDayOfMonth() + " de " + mes + " de " + fechaActual.getYear());
    }//GEN-LAST:event_btnDia6ActionPerformed

    private void btnDia7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDia7ActionPerformed
        // TODO add your handling code here:
        fechaActual = lista[6].toInstant()
                .atZone(ZoneId.systemDefault())
                .toLocalDate();
        String nombreDia = fechaActual.getDayOfWeek().getDisplayName(TextStyle.FULL, Locale.forLanguageTag("es"));
        String mes = fechaActual.getMonth().getDisplayName(TextStyle.FULL, new Locale("es", "ES")).toLowerCase();

        lblFecha.setText(nombreDia + " " + fechaActual.getDayOfMonth() + " de " + mes + " de " + fechaActual.getYear());
    }//GEN-LAST:event_btnDia7ActionPerformed

    private void btnIzquierdaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzquierdaActionPerformed
        try {
            Date fecha = Date.from(fechaActual.atStartOfDay(ZoneId.systemDefault()).toInstant());
            lista = gestionar.obtenerSemana(gestionar.obtenerSemana(fecha), "anterior");

            // Formatear los d√≠as y establecer el texto en las etiquetas
            lblLunes1.setText(String.format("%02d", lista[0].getDate()));
            lblMartes1.setText(String.format("%02d", lista[1].getDate()));
            lblMiercoles1.setText(String.format("%02d", lista[2].getDate()));
            lblJueves1.setText(String.format("%02d", lista[3].getDate()));
            lblViernes1.setText(String.format("%02d", lista[4].getDate()));
            lblSabado1.setText(String.format("%02d", lista[5].getDate()));
            lblDomingo1.setText(String.format("%02d", lista[6].getDate()));

            // Obtener LocalDate para el primer y √∫ltimo d√≠a de la semana
            LocalDate primerDia = lista[0].toInstant()
                    .atZone(ZoneId.systemDefault())
                    .toLocalDate();
            LocalDate ultimoDia = lista[6].toInstant()
                    .atZone(ZoneId.systemDefault())
                    .toLocalDate();

            // Obtener los meses y a√±os correspondientes
            String mesInicio = primerDia.getMonth().getDisplayName(TextStyle.FULL, new Locale("es", "ES")).toLowerCase();
            String mesFin = ultimoDia.getMonth().getDisplayName(TextStyle.FULL, new Locale("es", "ES")).toLowerCase();

            int anioInicio = primerDia.getYear();
            int anioFin = ultimoDia.getYear();

            // Determinar la salida de la etiqueta lblMes
            if (!mesInicio.equals(mesFin)) {
                // Si los meses son diferentes
                if (anioInicio == anioFin) {
                    // Si los a√±os son iguales, formatear como "mes1 - mes2 a√±o"
                    lblMes.setText(mesInicio + " - " + mesFin + " " + anioInicio);
                } else {
                    // Si los a√±os son diferentes, formatear como "mes1 a√±o1 - mes2 a√±o2"
                    lblMes.setText(mesInicio + " " + anioInicio + " - " + mesFin + " " + anioFin);
                }
            } else {
                // Si los meses son iguales
                lblMes.setText(mesInicio + " " + anioInicio);
            }

            fechaActual = primerDia;
        } catch (ControllerException ex) {
            Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_btnIzquierdaActionPerformed

    private void btnDerechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDerechaActionPerformed
        // TODO add your handling code here:
        try {
            Date fecha = Date.from(fechaActual.atStartOfDay(ZoneId.systemDefault()).toInstant());
            lista = gestionar.obtenerSemana(gestionar.obtenerSemana(fecha), "posterior");

            // Formatear los d√≠as y establecer el texto en las etiquetas
            lblLunes1.setText(String.format("%02d", lista[0].getDate()));
            lblMartes1.setText(String.format("%02d", lista[1].getDate()));
            lblMiercoles1.setText(String.format("%02d", lista[2].getDate()));
            lblJueves1.setText(String.format("%02d", lista[3].getDate()));
            lblViernes1.setText(String.format("%02d", lista[4].getDate()));
            lblSabado1.setText(String.format("%02d", lista[5].getDate()));
            lblDomingo1.setText(String.format("%02d", lista[6].getDate()));

            // Obtener LocalDate para el primer y √∫ltimo d√≠a de la semana
            LocalDate primerDia = lista[0].toInstant()
                    .atZone(ZoneId.systemDefault())
                    .toLocalDate();
            LocalDate ultimoDia = lista[6].toInstant()
                    .atZone(ZoneId.systemDefault())
                    .toLocalDate();

            // Obtener los meses y a√±os correspondientes
            String mesInicio = primerDia.getMonth().getDisplayName(TextStyle.FULL, new Locale("es", "ES")).toLowerCase();
            String mesFin = ultimoDia.getMonth().getDisplayName(TextStyle.FULL, new Locale("es", "ES")).toLowerCase();

            int anioInicio = primerDia.getYear();
            int anioFin = ultimoDia.getYear();

            // Determinar la salida de la etiqueta lblMes
            if (!mesInicio.equals(mesFin)) {
                // Si los meses son diferentes
                if (anioInicio == anioFin) {
                    // Si los a√±os son iguales, formatear como "mes1 - mes2 a√±o"
                    lblMes.setText(mesInicio + " - " + mesFin + " " + anioInicio);
                } else {
                    // Si los a√±os son diferentes, formatear como "mes1 a√±o1 - mes2 a√±o2"
                    lblMes.setText(mesInicio + " " + anioInicio + " - " + mesFin + " " + anioFin);
                }
            } else {
                // Si los meses son iguales
                lblMes.setText(mesInicio + " " + anioInicio);
            }

            fechaActual = primerDia;
        } catch (ControllerException ex) {
//            Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_btnDerechaActionPerformed

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        frame.agregarHabito(this);

        try {
            mostrarHabitos(); // Refresca la lista de h√°bitos
        } catch (FontFormatException | IOException e) {
//            Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void btnPerfilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPerfilActionPerformed
        frame.mostrarOpcionesPerfil();
    }//GEN-LAST:event_btnPerfilActionPerformed

    private void mostrarHabitos() throws FontFormatException, IOException {
        // Limpiar los paneles antes de listar
        if (pnlHabitosRealizados != null) {
            pnlHabitosRealizados.removeAll(); // Limpiar el panel de h√°bitos realizados
        }

        // Listar los h√°bitos pendientes y realizados
        listarHabitosPendientes();
        listarHabitosRealizados();

        // Revalidar y repintar para reflejar los cambios
        pnlHabitosPendientes.revalidate();
        pnlHabitosPendientes.repaint();
        pnlHabitosRealizados.revalidate();
        pnlHabitosRealizados.repaint();
    }

    private void listarHabitosPendientes() throws FontFormatException, IOException {
        // Aseg√∫rate de que pnlHabitosPendientes ya est√© inicializado antes de llamarlo
        if (pnlHabitosPendientes == null) {
            pnlHabitosPendientes = new JPanel();
            pnlHabitosPendientes.setLayout(new BoxLayout(pnlHabitosPendientes, BoxLayout.Y_AXIS));
            pnlHabitosPendientes.setName("pnlHabitosPendientes");
            pnlHabitosPendientes.setOpaque(false);

            // Crear un JScrollPane para los h√°bitos pendientes solo una vez
            JScrollPane scpHabitosPendientes = new JScrollPane(pnlHabitosPendientes);
            scpHabitosPendientes.setOpaque(false);
            scpHabitosPendientes.getViewport().setOpaque(false);
            scpHabitosPendientes.setBorder(null);
            scpHabitosPendientes.getVerticalScrollBar().setUnitIncrement(16);
            scpHabitosPendientes.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
            scpHabitosPendientes.setPreferredSize(new Dimension(700, 170));

            // A√±adir el JScrollPane al contenedor principal solo una vez
            pnlContenedorHabitosPendientes.add(scpHabitosPendientes);
        } else {
            // Limpiar el panel existente antes de listar
            pnlHabitosPendientes.removeAll();
        }

        try {
            // Obtener h√°bitos desde la base de datos
            List<HabitoDTO> habitos = new GestionarHabitosNegocio().obtenerHabitos(Sesion.getCuenta());

            // Si no hay h√°bitos, mostrar un mensaje
            if (habitos.isEmpty()) {
                JLabel noHabitsLabel = new JLabel("No hay h√°bitos pendientes.");
                pnlHabitosPendientes.add(noHabitsLabel);
            } else {
                // Iterar sobre la lista de h√°bitos obtenidos y a√±adirlos al panel
                for (HabitoDTO habito : habitos) {
                    addHabit(habito);  // Pasar el objeto HabitoDTO completo
                }
            }
        } catch (ControllerException ex) {
            return;
        }

        // Actualizar la interfaz
        pnlHabitosPendientes.revalidate();
        pnlHabitosPendientes.repaint();
    }

    private void registrarCompletado(HabitoDTO habitoDTO) throws FontFormatException, IOException {
        try {

            // Crear el historial del h√°bito completado
            HistorialHabitosDTO historial = new HistorialHabitosDTO(
                    new Date(), // Fecha actual
                    true, // Completado
                    habitoDTO
            );

            // Registrar el historial
            new GestionarHabitosNegocio().guardarHistorial(historial);

        } catch (ControllerException ex) {
            Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
            // Manejar el error si es necesario
        }
    }

    private void listarHabitosRealizados() throws FontFormatException, IOException {
        // Solo inicializar el panel si no ha sido creado
        if (pnlHabitosRealizados == null) {
            pnlHabitosRealizados = new JPanel();
            pnlHabitosRealizados.setLayout(new BoxLayout(pnlHabitosRealizados, BoxLayout.Y_AXIS));
            pnlHabitosRealizados.setName("pnlHabitosRealizados");
            pnlHabitosRealizados.setOpaque(false);

            JScrollPane scpHabitosRealizados = new JScrollPane(pnlHabitosRealizados);
            scpHabitosRealizados.setOpaque(false);
            scpHabitosRealizados.getViewport().setOpaque(false);
            scpHabitosRealizados.setBorder(null);
            scpHabitosRealizados.getVerticalScrollBar().setUnitIncrement(16);
            scpHabitosRealizados.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
            scpHabitosRealizados.setPreferredSize(new Dimension(700, 170));

            pnlContenedorHabitosRealizados.add(scpHabitosRealizados);
//        addHabit("Ejercicio", true);
//        addHabit("Dormir", true);
//        addHabit("Gym", true);
//        addHabit("Pasear al perro", true);
//        addHabit("Tarea", true);
//        addHabit("Bitcoin", true);
        }
    }

    private void addHabit(HabitoDTO habitoDTO) throws FontFormatException, IOException {
        String habitName = habitoDTO.getNombre(); // Obtener el nombre del h√°bito desde el DTO
        HabitPanel habit = new HabitPanel(habitName, false); // Puedes cambiar el estado inicial seg√∫n necesites

        // A√±adir el evento de clic para mover entre listas
        habit.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                try {
                    // Determinar si est√° en la lista de pendientes o realizados
                    if (!habit.isCompleted()) {
                        // Mover de pendientes a realizados
                        pnlHabitosPendientes.remove(habit);
                        pnlHabitosRealizados.add(habit);
                        habit.setCompleted(true); // Marcar como completado

                        // Llamar al m√©todo para registrar el h√°bito completado
                        registrarCompletado(habitoDTO); // Pasar el HabitoDTO
                    } else {
                        // Mover de realizados a pendientes
                        pnlHabitosRealizados.remove(habit);
                        pnlHabitosPendientes.add(habit);
                        habit.setCompleted(false);
                    }

                    // Refrescar las listas
                    pnlHabitosPendientes.revalidate();
                    pnlHabitosPendientes.repaint();
                    pnlHabitosRealizados.revalidate();
                    pnlHabitosRealizados.repaint();

                } catch (FontFormatException | IOException ex) {
                    Logger.getLogger(Inicio.class.getName()).log(Level.SEVERE, null, ex);
                    // Manejar el error si es necesario
                }
            }
        });

        // A√±adir el panel del h√°bito a la lista correspondiente
        pnlHabitosPendientes.add(habit);
        pnlHabitosPendientes.revalidate();
        pnlHabitosPendientes.repaint();
    }

// Panel personalizado para cada h√°bito
    private class HabitPanel extends JPanel {

        private Boolean isCompleted;
        private final JLabel imagePanel;

        public HabitPanel(String habitName, Boolean isCompleted) throws FontFormatException, IOException {
            this.isCompleted = isCompleted;

            setLayout(new FlowLayout(FlowLayout.LEFT));
            setPreferredSize(new Dimension(0, 30));  // Altura fija de 30, ancho ajustable
            setMaximumSize(new Dimension(Integer.MAX_VALUE, 30));  // Establece la altura m√°xima

            JLabel nameLabel = new JLabel(habitName);
            nameLabel.setHorizontalAlignment(SwingConstants.LEFT);
            nameLabel.setFont(frame.cargarFuente("/fonts/Nunito/static/Nunito-Regular.ttf", 18F));

            // Imagen opcional (ejemplo con un cuadrado de color)
            imagePanel = new JLabel(new ImageIcon(getClass().getResource(isCompleted
                    ? "/img/checkColoreado.png"
                    : "/img/checkVacio.png")));

            setCursor(new Cursor(java.awt.Cursor.HAND_CURSOR));
            setOpaque(false);
            setBorder(BorderFactory.createEmptyBorder(0, 0, 20, 0));  // Espacio de 8px en la parte inferior

            add(imagePanel);
            add(nameLabel);
        }

        public Boolean isCompleted() {
            return isCompleted;
        }

        public void setCompleted(Boolean completed) {
            this.isCompleted = completed;
            // Cambiar el √≠cono de la imagen dependiendo del estado
            imagePanel.setIcon(new ImageIcon(getClass().getResource(completed
                    ? "/img/checkColoreado.png"
                    : "/img/checkVacio.png")));
        }
    }

    private void setFonts() throws FontFormatException, IOException {
        lblNombreUsuario.setFont(frame.cargarFuente("/fonts/Nunito/static/Nunito-Medium.ttf", 20F));
        lblMes.setFont(frame.cargarFuente("/fonts/Kurale/Kurale-Regular.ttf", 20F));
        Font semiBoldFont = frame.cargarFuente("/fonts/Nunito/static/Nunito-SemiBold.ttf", 22F);
        Font nunitoRegular = frame.cargarFuente("/fonts/Nunito/static/Nunito-Regular.ttf", 18F);
        lblHabitosPendientes.setFont(semiBoldFont);
        lblHabitosRealizados.setFont(semiBoldFont);
        lblFecha.setFont(nunitoRegular);
        btnDia1.setFont(nunitoRegular);
        btnDia2.setFont(nunitoRegular);
        btnDia3.setFont(nunitoRegular);
        btnDia4.setFont(nunitoRegular);
        btnDia5.setFont(nunitoRegular);
        btnDia6.setFont(nunitoRegular);
        btnDia7.setFont(nunitoRegular);

    }

    private void cargarDias(Date hoy) {

        lista = gestionar.obtenerSemana(hoy);

        LocalDate primerDia = lista[0].toInstant()
                .atZone(ZoneId.systemDefault())
                .toLocalDate();
        LocalDate ultimoDia = lista[6].toInstant()
                .atZone(ZoneId.systemDefault())
                .toLocalDate();

        String mesInicio = primerDia.getMonth().getDisplayName(TextStyle.FULL, new Locale("es", "ES")).toLowerCase();
        String mesFin = ultimoDia.getMonth().getDisplayName(TextStyle.FULL, new Locale("es", "ES")).toLowerCase();

        int anioInicio = primerDia.getYear();
        int anioFin = ultimoDia.getYear();

        if (!mesInicio.equals(mesFin)) {
            if (anioInicio == anioFin) {
                lblMes.setText(mesInicio + " - " + mesFin + " " + anioInicio);
            } else {
                lblMes.setText(mesInicio + " - " + mesFin + " " + anioFin);
            }
        } else {
            lblMes.setText(mesInicio + " " + anioInicio);
        }

        fechaActual = primerDia;

        lblLunes1.setText(String.format("%02d", lista[0].getDate()));
        lblMartes1.setText(String.format("%02d", lista[1].getDate()));
        lblMiercoles1.setText(String.format("%02d", lista[2].getDate()));
        lblJueves1.setText(String.format("%02d", lista[3].getDate()));
        lblViernes1.setText(String.format("%02d", lista[4].getDate()));
        lblSabado1.setText(String.format("%02d", lista[5].getDate()));
        lblDomingo1.setText(String.format("%02d", lista[6].getDate()));

        fechaActual = LocalDate.now();
        String nombreDia = fechaActual.getDayOfWeek().getDisplayName(TextStyle.FULL, Locale.forLanguageTag("es"));
        String mes = fechaActual.getMonth().getDisplayName(TextStyle.FULL, new Locale("es", "ES")).toLowerCase();

        lblFecha.setText(nombreDia + " " + fechaActual.getDayOfMonth() + " de " + mes + " de " + fechaActual.getYear());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnDerecha;
    private javax.swing.JButton btnDia1;
    private javax.swing.JButton btnDia2;
    private javax.swing.JButton btnDia3;
    private javax.swing.JButton btnDia4;
    private javax.swing.JButton btnDia5;
    private javax.swing.JButton btnDia6;
    private javax.swing.JButton btnDia7;
    private javax.swing.JButton btnHabitos;
    private javax.swing.JButton btnHoy;
    private javax.swing.JButton btnIzquierda;
    private javax.swing.JButton btnPerfil;
    private javax.swing.JButton btnProgreso;
    private javax.swing.JLabel fondo;
    private javax.swing.JLabel lblDivision;
    private javax.swing.JLabel lblDomingo;
    private javax.swing.JLabel lblDomingo1;
    private javax.swing.JLabel lblFecha;
    private javax.swing.JLabel lblHabitosPendientes;
    private javax.swing.JLabel lblHabitosRealizados;
    private javax.swing.JLabel lblJueves;
    private javax.swing.JLabel lblJueves1;
    private javax.swing.JLabel lblLunes;
    private javax.swing.JLabel lblLunes1;
    private javax.swing.JLabel lblMartes;
    private javax.swing.JLabel lblMartes1;
    private javax.swing.JLabel lblMes;
    private javax.swing.JLabel lblMiercoles;
    private javax.swing.JLabel lblMiercoles1;
    private javax.swing.JLabel lblNombreUsuario;
    private javax.swing.JLabel lblSabado;
    private javax.swing.JLabel lblSabado1;
    private javax.swing.JLabel lblViernes;
    private javax.swing.JLabel lblViernes1;
    private javax.swing.JPanel pnlContenedorHabitosPendientes;
    private javax.swing.JPanel pnlContenedorHabitosRealizados;
    // End of variables declaration//GEN-END:variables
}
