package org.itson.pruebas.gestionhabitos.view;

import com.formdev.flatlaf.themes.FlatMacLightLaf;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontFormatException;
import java.awt.Image;
import java.awt.event.WindowEvent;
import java.awt.event.WindowFocusListener;
import java.awt.geom.RoundRectangle2D;
import java.io.IOException;
import java.io.InputStream;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import org.itson.pruebas.gestionhabitos.controller.ControllerException;
import org.itson.pruebas.gestionhabitos.controller.GestionarHabitosNegocio;
import org.itson.pruebas.gestionhabitos.controller.HistorialHabitosDTO;
import org.itson.pruebas.gestionhabitos.controller.IGestionarHabitosNegocio;

/**
 *
 * @author Eliana Monge
 * @author Cristina Castro
 * @author Eduardo Talavera
 * @author Roberto García
 */
public class FrameContenedor extends javax.swing.JFrame {

    private JPanel panelActual;
    private static final Logger logger = Logger.getLogger(FrameContenedor.class.getName());

    public FrameContenedor() {
        try {
            UIManager.setLookAndFeel(new FlatMacLightLaf());
        } catch (UnsupportedLookAndFeelException ex) {
            logger.log(Level.WARNING, "Failed to initialize LaF");
        }

        initComponents();
        setIcons();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Infloria");
        setLocation(new java.awt.Point(0, 0));
        setMaximumSize(null);
        setMinimumSize(new java.awt.Dimension(750, 750));
        setName("gestioHabitos"); // NOI18N
        setResizable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 750, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 750, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
 /**
     * Método para limpiar el contenido de la ventana. Si hay un panel actualmente mostrado, lo elimina de la ventana.
     */
    public void limpiarFrame() {
        if (panelActual != null) {
            this.remove(panelActual);
        }
    }

    /**
     * Método para agregar un panel a la ventana. Este método agrega el panel especificado a la ventana, lo posiciona y ajusta su tamaño automáticamente.
     *
     * @param panel El panel que se va a agregar a la ventana.
     */
    public void ponerEnFrame(JPanel panel) {
        this.add(panel);
        panel.setBounds(0, 0, 750, 750);
        this.setLocationRelativeTo(null);
        this.pack();
    }

    // Métodos de aviso, confirmación, etc., sin cambios
    public void mostrarAviso(String mensaje, String titulo) {
        JOptionPane.showMessageDialog(this, mensaje, titulo, JOptionPane.WARNING_MESSAGE);
    }

    public boolean mostrarConfirmacion(String mensaje, String titulo) {
        int respuesta = JOptionPane.showConfirmDialog(null, mensaje, titulo, JOptionPane.OK_CANCEL_OPTION);
        return respuesta == JOptionPane.OK_OPTION;
    }

    public void mostrarInformacion(String mensaje, String titulo) {
        JOptionPane.showMessageDialog(this, mensaje, titulo, JOptionPane.INFORMATION_MESSAGE);
    }

    public Font cargarFuente(String fontPath, float fontSize) throws FontFormatException, IOException {
        InputStream fontStream = Inicio.class.getResourceAsStream(fontPath);
        Font font = Font.createFont(Font.TRUETYPE_FONT, fontStream);
        return font.deriveFont(fontSize);
    }

    public void mostrarInicioSesion() {
        limpiarFrame();
        InicioSesion inicioSesion = new InicioSesion(this);
        ponerEnFrame(inicioSesion);
        panelActual = inicioSesion;
    }

    public void mostrarInicio() {
        limpiarFrame();
        Inicio inicio = new Inicio(this);
        ponerEnFrame(inicio);
        panelActual = inicio;
    }

    public void mostrarRegistrarUsuario() {
        limpiarFrame();
        RegistrarUsuario registrarUsuario = new RegistrarUsuario(this);
        ponerEnFrame(registrarUsuario);
        panelActual = registrarUsuario;
    }

    public void mostrarListaHabitos() {
        limpiarFrame();
        ListaHabitos listaHabitos = new ListaHabitos(this);
        ponerEnFrame(listaHabitos);
        panelActual = listaHabitos;
    }

    public void mostrarProgresoSemanal() {
        limpiarFrame();
        ProgresoSemanal progresoSemanal = new ProgresoSemanal(this);
        ponerEnFrame(progresoSemanal);
        panelActual = progresoSemanal;
    }

    public void mostrarProgresoMensual() {
        limpiarFrame();
        ProgresoMensual progresoMensual = new ProgresoMensual(this);
        ponerEnFrame(progresoMensual);
        panelActual = progresoMensual;
    }

    public void agregarHabito(JPanel jpanel) {
// Crear un JDialog para mostrar el JPanel VerHabito
        JDialog dialog = new JDialog(this, "Agregar Hábito", true);
        dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        dialog.setSize(new Dimension(391, 288));  // Tamaño del diálogo, puedes ajustarlo según tus necesidades

        dialog.setLayout(new BorderLayout());

        // Añadir el JPanel VerHabito al JDialog
        CrearHabito pnlVerHabito = new CrearHabito(this, dialog, jpanel);  // Pasar el nombre del hábito, si es necesario
        dialog.add(pnlVerHabito, BorderLayout.CENTER);

        // Centrar el diálogo en la pantalla
        dialog.setLocationRelativeTo(null);
        dialog.setResizable(false);
        // Mostrar el diálogo de manera modal (bloquea el acceso a otros componentes)
        dialog.setVisible(true);
    }

    public void mostrarOpcionesPerfil() {
        JDialog dialog = new JDialog(this, "Dialogo Sin Titulo", false);
        dialog.setUndecorated(true); // Quitar la barra de título
        dialog.setSize(new Dimension(160, 50));
        dialog.setLocationRelativeTo(null);
        dialog.setLayout(new BorderLayout());

        OpcionesUsuario opcionesUsuario = new OpcionesUsuario(this, dialog);
        dialog.add(opcionesUsuario, BorderLayout.CENTER);

        int cornerRadius = 20; // Radio de los bordes redondeados
        dialog.setShape(new RoundRectangle2D.Double(0, 0, dialog.getWidth(), dialog.getHeight(), cornerRadius, cornerRadius));
        int margin = 40; // Margen desde la esquina superior derecha
        int x = this.getX() + this.getWidth() - dialog.getWidth() - margin; // Coordenada X
        int y = this.getY() + margin + 50; // Coordenada Y
        dialog.setLocation(x, y);

        // Agregar un WindowFocusListener para cerrar el diálogo cuando pierde el foco
        dialog.addWindowFocusListener(new WindowFocusListener() {
            @Override
            public void windowLostFocus(WindowEvent e) {
                dialog.dispose(); // Cerrar el diálogo
            }

            @Override
            public void windowGainedFocus(WindowEvent e) {
                // No se necesita implementar nada aquí
            }
        });

        dialog.setResizable(false);
        dialog.setVisible(true);
    }

    private void setIcons() {
        List<Image> iconImages = new ArrayList<>();

        iconImages.add(new ImageIcon(FrameContenedor.class.getResource("/icons/icon16.png")).getImage());
        iconImages.add(new ImageIcon(FrameContenedor.class.getResource("/icons/icon32.png")).getImage());
        iconImages.add(new ImageIcon(FrameContenedor.class.getResource("/icons/icon64.png")).getImage());
        iconImages.add(new ImageIcon(FrameContenedor.class.getResource("/icons/icon128.png")).getImage());
        initComponents();

        this.setIconImages(iconImages);
    }

    public void refrescarPanelActual() {
        if (panelActual.getClass().getSimpleName().equalsIgnoreCase("Inicio")) {
            mostrarInicio();
        } else if (panelActual.getClass().getSimpleName().equalsIgnoreCase("ListaHabitos")) {
            mostrarListaHabitos();
        } else {
            mostrarProgresoSemanal();
        }
    }

    public JPanel getPanelActual() {
        return panelActual;
    }

    public JDialog avisoNombreRegistro(String mensaje, int x, int y) {
        int xMetodo, yMetodo;
        JDialog dialog = new JDialog(this, "Dialogo Sin Titulo", false);
        dialog.setUndecorated(true); // Quitar la barra de título
        dialog.setSize(new Dimension(260, 50));
        dialog.setLocationRelativeTo(null);
        dialog.setLayout(new BorderLayout());

        // Crear un JLabel para mostrar el mensaje
        JLabel labelMensaje = new JLabel(mensaje, SwingConstants.CENTER);
        dialog.add(labelMensaje, BorderLayout.CENTER); // Agregar el JLabel al centro del diálogo

        int cornerRadius = 20; // Radio de los bordes redondeados
        dialog.setShape(new RoundRectangle2D.Double(0, 0, dialog.getWidth(), dialog.getHeight(), cornerRadius, cornerRadius));

        xMetodo = this.getX() + x; // Coordenada X
        yMetodo = this.getY() + y - 20; // Coordenada Y
        dialog.setLocation(xMetodo, yMetodo);

        dialog.setResizable(false);
        dialog.setVisible(true);
        return dialog;
    }

    public List<HistorialHabitosDTO> obtenerHabitosDia(LocalDate dia) throws NoSuchElementException, ControllerException {
        IGestionarHabitosNegocio gestionar = new GestionarHabitosNegocio();
        String hoyString = gestionar.obtenerDia(dia);
        try {
            return gestionar.obtenerHabitosDia(dia, hoyString);
        } catch (ControllerException ex) {
            throw new ControllerException("No hay hábitos pendientes el día de hoy");
        } catch (NoSuchElementException e) {
            throw new NoSuchElementException("El usuario no tiene hábitos asignados para el día " + dia.toString());
        }
    }

    public void obtenerHabitosHoy() {
        try {
            HistorialHabitosDTO.setHistorialHabitosDTOs(obtenerHabitosDia(LocalDate.now()));
        } catch (NoSuchElementException | ControllerException ex) {
            HistorialHabitosDTO.setHistorialHabitosDTOs(new ArrayList<>());
            logger.log(Level.INFO, ex.getMessage());
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
